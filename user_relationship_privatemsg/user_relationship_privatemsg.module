<?php
// $Id$

/**
 * @file
 * Allows to send messages to all members of a role.
 */

/**
 * Implements hook_perm().
 */
function user_relationship_privatemsg_perm() {
  return array(
    'write privatemsg to relationships',
  );
}

function user_relationship_privatemsg_theme() {
  return array(
    'user_relationship_privatemsg_format' => array(
      'arguments' => array('relationship' => NULL, 'options' => array()),
    ),
  );
}

/**
 * Implements hook_privatemsg_recipient_types_info().
 */
function user_relationship_privatemsg_privatemsg_recipient_type_info() {
  $types = user_relationships_types_load();

  // If there is no relationship defined, don't expose it as a recipient type.
  if (empty($types)) {
    return;
  }

  return array(
    'relationship' => array(
      'name' => t('User relationship'),
      'description' => t('Enter the name of a user relationship to write a message to all related users. Example: %example.', array('%example' => theme('user_relationship_privatemsg_format', reset($types)))),
      'format' => 'user_relationship_privatemsg_format',
      'load' => 'user_relationship_privatemsg_load_multiple',
      'autocomplete' => 'user_relationship_privatemsg_autocomplete',
      'generate recipients' => 'user_relationship_privatemsg_load_recipients',
      'max' => 'user_relationship_privatemsg_count_recipients',
      'write access' => 'write privatemsg to relationships',
    ),
  );
}

function theme_user_relationship_privatemsg_format($relationship) {
  return $relationship->plural_name . ' ' .  t('[relationship]');
}

function user_relationship_privatemsg_load_recipients($recipient, $author, $limit, $offset) {
  $recipients = array();
  $result = db_query('SELECT requestee_id FROM {user_relationships} WHERE rtid = %d AND requester_id = %d AND requestee_id > %d ORDER BY requestee_id ASC LIMIT %d', $recipient->recipient, $author->uid, $offset, $limit);

  while ($row = db_fetch_object($result)) {
    $recipients[] = $row->requestee_id;
  }
  return $recipients;
}

/**
 * Return the number of users which have a given role.
 */
function user_relationship_privatemsg_count_recipients($recipient, $author) {
  return db_result(db_query('SELECT MAX(requestee_id) FROM {user_relationships} WHERE rtid = %d AND requester_id = %d requestee_id > %d ORDER BY requestee_id ASC LIMIT %d', $recipient->recipient, $author->uid, $offset, $limit));
}

/**
 * Implements hook_privatemsg_recipient_autocomplete().
 */
function user_relationship_privatemsg_autocomplete($fragment, $names, $limit) {
  if (user_access('write privatemsg to relationships')) {
    $query = _privatemsg_assemble_query(array('autocomplete_roles', 'user_relationship_privatemsg'), $fragment, $names);
    $result = db_query_range($query['query'], $fragment, 0, $limit);
    // 3: Build proper suggestions and print.
    $matches = array();
    while ($role = db_fetch_object($result)) {
      // Don't use placeholders to make sure that the [relationship] is always at the end
      // and can be used when resolving names again.
      $matches[$role->plural_name] = $role->plural_name . ' ' .  t('[relationship]');
    }
    return $matches;
  }
  return array();
}

/**
 * Implements hook_privatemsg_name_lookup().
 */
function user_relationship_privatemsg_privatemsg_name_lookup($string) {
  global $user;
  // To make it possible to have users and roles with the same name, roles need
  // to contain an [relationship] as part of their "name".
  // Search and replace this before looking up the role name.
  if (strpos($string, t('[relationship]')) !== FALSE) {
    $relationship = str_replace(t('[relationship]'), '', $string);
    if ($recipient = user_relationships_type_load(array('plural_name' => $relationship))) {
      $recipient->type = 'relationship';
      $recipient->recipient = $recipient->rtid;
      return $recipient;
    }
  }
}

/**
 * Query definition to search for username autocomplete suggestions.
 *
 * @param $fragments
 *   Query fragments array.
 * @param $search
 *   Which search string is currently searched for.
 * @param $names
 *   Array of names not to be used as suggestions.
 */
function user_relationship_privatemsg_sql_autocomplete_roles(&$fragments, $search, $names) {
  $fragments['primary_table'] = '{user_relationship_types} urt';
  $fragments['select'][] = 'urt.plural_name';

  // Escape the % to get it through the placeholder replacement.
  $fragments['where'][] = "urt.plural_name LIKE '%s'";
  $fragments['query_args']['where'][] = $search .'%%';
  if (!empty($names)) {
    // If there are already names selected, exclude them from the suggestions.
    $fragments['where'][] = "urt.plural_name NOT IN (". db_placeholders($names, 'text') .")";
    $fragments['query_args']['where'] += $names;
  }
  $fragments['order_by'][] = 'urt.plural_name ASC';
}
