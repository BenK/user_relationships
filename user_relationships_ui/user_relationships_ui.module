<?php
// $Id: user_relationships_ui.module,v 1.1.2.1 2008-03-02 00:51:52 sprsquish Exp $

/**
 * Public API for getting the set or default message
 *
 * Use the relationship message system. This is set up to retrieve the admin's set messages or fall back on the default
 * if those aren't set. It'll automatically replace specific tokens with information from $relationship. If you need to provide
 * additional tokens, they can be sent through $replacements.
 *
 * @param $key
 *    string message name
 *    Check at the top of user_relationships_ui.module in "_user_relationships_ui_default_messages()"
 *    for the keys and default messages attached to those keys.
 * @param $replacements
 *    array replaceable tokens to append or replace default tokens
 *
 * @return
 *    string formatted message
 */
function user_relationships_ui_get_message($key, $relationship = NULL, $replacements = array()) {
  $msg = variable_get("user_relationships_ui_msg_{$key}", NULL);
  if (is_null($msg)) { 
    $messages = _user_relationships_ui_default_messages();
    $msg      = _user_relationships_get_from_array($key, $messages);
  }

  if ($relationship) {
    if (!$relationship->requester) { $relationship->requester = user_load($relationship->requester_id); }
    if (!$relationship->requestee) { $relationship->requestee = user_load($relationship->requestee_id); }
    if (!($relationship->name || $relationship->type)) { $relationship->type = user_relationships_type_load($relationship->rtid); }

    $replaceables = array(
      '!requester'                => theme('username', $relationship->requester),
      '!requestee'                => theme('username', $relationship->requestee),
      '%relationship_name'        => $relationship->name ? $relationship->name : $relationship->type->name,
      '%relationship_plural_name' => $relationship->plural_name ? $relationship->plural_name : $relationship->type->plural_name,
    );
    $replacements = array_merge($replaceables, $replacements);
  }

  return t($msg, $replacements);
}


/**********************************
 *
 *      "PRIVATE" FUNCTIONS
 *
 **********************************/

/**
 * Returns a nested array of default messages
 */
function _user_relationships_ui_default_messages() {
  return array(
    'informational' => array(
      'submitted'     => 'Your request to be a %relationship_name of !requestee has been submitted.',
      'accepted'      => 'You are now a %relationship_name of !requester.',
      'disapproved'   => "!requester's request to be a %relationship_name of !requestee has been removed.",
      'cancel'        => 'Your request to be a %relationship_name of !requestee has been canceled.',
      'default'       => 'No action has been taken.',
      'removed'       => '!requester is no longer a %relationship_name of !requestee.',
      'pending'       => '!requester believes they are a %relationship_name of yours.  Please view your !pending_relationship_requests to approve them.',
      'pre_approved'  => "You're request to be %relationship_name of !requestee has been pre-approved. You are now a %relationship_name of !requestee."
    ),
    'error' => array(
      'too_many_relationships'  => 'You already relate to this user in every possible way.',
      'existing_request'        => 'You have already requested to be a %relationship_name of !requestee',
      'existing_relationship'   => 'You are already a %relationship_name of !requestee',
      'not_accepting_requests'  => 'This user is not accepting relationship requests.',
      'self_request'            => 'You are not allowed to create a relationship to yourself.',
      'non_existant_user'       => 'This user does not exist.',
      'non_existant_type'       => 'That relationship type does not exist',
      'unknown_error'           => 'An unknown error occurred. Please contact the site administrator',
    ),
  );
}


/**
 * Recursively search an array for a key and return the value attached to it
 */
function _user_relationships_get_from_array($needle, &$haystack) {
  foreach ($haystack as $key => $value) {
    if ($key == $needle) {
      return $value;
    }
    else if (is_array($value)) {
      if ($msg = _user_relationships_get_from_array($needle, $value)) {
        return $msg;
      }
    }
  }
}


/*
 * Notify the user of pending relationship requests
 */
function _user_relationships_ui_set_notifications(&$account) {
  global $user;

  //only do this for the active user
  if ($account->uid != $user->uid) {
    return;
  }

  $notifications = drupal_get_messages('status', FALSE);
  $notifications = $notifications['status'] ? $notifications['status'] : array();

  $relationships = user_relationships_load(array('requestee_id' => $account->uid, 'approved' => FALSE));
  foreach ($relationships as $relationship) {
    $msg = user_relationships_ui_get_message('pending', $relationship, array(
      '!pending_relationship_requests'  => l(t('pending relationship requests'), "relationships/requests")
    ));

    if (!in_array($msg, $notifications)) {
      drupal_set_message($msg);
    }
  }
}

/**
 * Adds autocompletion capability
 */
function _user_relationships_ui_autocomplete_types($string = '') {
  $matches = array();
  if ($string) {
    $result = db_query_range("SELECT name FROM {user_relationship_types} WHERE LOWER(name) LIKE LOWER('%%%s%%')", strtolower($string), 0, 10);
    while ($relationship = db_fetch_object($result)) {
      $matches[$relationship->name] = check_plain($relationship->name);
   }
  }
  print drupal_to_js($matches);
  exit();
}

/**
 * List of relationships between two users
 */
function _user_relationships_ui_between(&$viewer, &$viewed) {
  $list = array();

  $relationships = user_relationships_load(array('between' => array($viewer->uid, $viewed->uid)));
  foreach ($relationships as $relationship) {
    if ($relationship->approved && !$list[$relationship->rid]) {
      $list[$relationship->rid] = t('%relationship_name (!remove_link)', array(
        '%relationship_name'  => $relationship->name,
        '!remove_link'        => theme('user_relationships_remove_link', $viewer->uid, $relationship->rid)
      ));
    }
  }

  return $list;
}


/**
 * List of pending relationships with between two users
 */
function _user_relationships_ui_actions_between(&$viewer, &$viewed) {
  if ($viewer->uid == $viewed->uid) {
    return;
  }

  $list = array();

  $relationships = user_relationships_load(array('requester_id' => $viewer->uid, 'requestee_id' => $viewed->uid, 'approved' => FALSE));
  foreach ($relationships as $relationship) {
    $list[] = t('You have requested to be a %relationship_name of this user. (!pending_requests)', array(
      '%relationship_name'  => $relationship->name,
      '!pending_requests'   => l(t('pending requests'), "relationships/requests"),
    ));
  }

  $relationships = user_relationships_load(array('requester_id' => $viewed->uid, 'requestee_id' => $viewer->uid, 'approved' => FALSE));
  foreach ($relationships as $relationship) {
    $list[] = t('This user believes that they are a %relationship_name of yours. (!pending_requests)', array(
      '%relationship_name'  => $relationship->name,
      '!pending_requests'   => l(t('pending requests'), "user/{$viewer->uid}/relationships/requests"),
    ));
  }

  $types_count = (int)db_result(db_query("SELECT COUNT(*) FROM {user_relationship_types}"));
  $relationships_count = user_relationships_load(array('between' => array($viewer->uid, $viewed->uid)), array('count' => TRUE));
  if (!$relationships_count || (variable_get('user_relationships_ui_allow_multiple', TRUE) && ($relationships_count < $types_count))) {
    $list[] = theme('user_relationships_request_relationship_link', $viewed);
  }

  return $list;
}


/**
 * Helper function to build the settings form for the notification messages
 */
function _user_relationships_ui_message_settings_form(&$form, $defaults = array()) {
  foreach ($defaults as $key => $value) {
    if (is_array($value)) {
      $form[$key] = array(
        '#type'         => 'fieldset',
        '#title'        => ucfirst(str_replace('_',' ',$key)),
        '#collapsible'  => TRUE,
        '#collapsed'    => TRUE
      );
      _user_relationships_ui_message_settings_form($form[$key], $value);
    }
    else {
      $form["user_relationships_ui_msg_{$key}"] = array(
        '#type'           => 'textfield',
        '#title'          => ucfirst(str_replace('_',' ',$key)),
        '#default_value'  => variable_get("user_relationships_ui_msg_{$key}", $value)
      );
    }
  }  
}


/**********************************
 *          CALLBACKS
 **********************************/

/**
 * Check access callback
 */
function user_relationships_ui_check_access($types, $account = NULL) {
  global $user;

  if (user_access('administer users')) { 
    return TRUE;
  }

  $access = FALSE;
  if (!is_array($types)) {
    $types = array($types);
  }

  foreach ($types as $type) {
    switch ($type) {
    case 'view': $access = ($access || user_access('maintain own relationships') | user_access('view user relationships'));
    case 'edit': $access = ($access || user_access('maintain own relationships') & user_access('can have relationships'));
    case 'user': $access = ($access || ($account->uid == $user->uid));
    }
  }

  return $access;
}


/**********************************
 *
 *            HOOKS
 *
 **********************************/

/**
 * Help
 */
function user_relationships_ui_help($section) {
  switch ($section) {
    case 'admin/help#user_relationships_ui':
      $output = '<p>'. t('This module allows you to create relationship types that users can use to connect to each other.') .'</p>';
      return $output;

    case 'admin/user/relationships':
      $output = '<p>'. t('This page lets you setup user relationship types.') .'</p>';
      return $output;
  }
}

/**
 * Perm
 */
function user_relationships_ui_perm() {
  return array(
    'administer user relationships',
    'maintain own relationships',
    'view user relationships',
  );
}

/**
 * Menu
 */
function user_relationships_ui_menu() {
  $items = array();

  $items['admin/user/relationships'] = array(
    'title'             => t('Relationships'),
    'description'       => t('Create relationship types'),
    'access callback'   => 'user_access',
    'access arguments'  => array('administer user relationships'),
    'page callback'     => 'user_relationships_ui_types_list_page',
    'file'              => 'user_relationships_ui.pages.inc',
  );
    $items['admin/user/relationships/list'] = array(
      'title'             => t('List'),
      'type'              => MENU_DEFAULT_LOCAL_TASK,
      'page callback'     => 'user_relationships_ui_types_list_page',
      'access callback'   => 'user_access',
      'access arguments'  => array('administer user relationships'),
      'file'              => 'user_relationships_ui.pages.inc',
    );
    $items['admin/user/relationships/add'] = array(
      'title'             => t('Add type'),
      'type'              => MENU_LOCAL_TASK,
      'weight'            => 1,
      'page callback'     => 'drupal_get_form',
      'page arguments'    => array('user_relationships_ui_type_edit'),
      'access callback'   => 'user_access',
      'access arguments'  => array('administer user relationships'),
      'file'              => 'user_relationships_ui.admin.inc',
    );
    $items['admin/user/relationships/%user_relationships_type/edit'] = array(
      'title'             => t('Edit type'),
      'type'              => MENU_CALLBACK,
      'page callback'     => 'drupal_get_form',
      'page arguments'    => array('user_relationships_ui_type_edit', 3),
      'access callback'   => 'user_access',
      'access arguments'  => array('administer user relationships'),
      'file'              => 'user_relationships_ui.admin.inc',
    );
    $items['admin/user/relationships/%user_relationships_type/delete'] = array(
      'title'             => t('Delete type'),
      'type'              => MENU_CALLBACK,
      'page callback'     => 'drupal_get_form',
      'page arguments'    => array('user_relationships_ui_type_delete', 3),
      'access callback'   => 'user_access',
      'access arguments'  => array('administer user relationships'),
      'file'              => 'user_relationships_ui.admin.inc',
    );
  $items['admin/user/relationships/settings'] = array(
    'title'             => t('Settings'),
    'type'              => MENU_LOCAL_TASK,
    'weight'            => 2,
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('user_relationships_ui_settings'),
    'access callback'   => 'user_access',
    'access arguments'  => array('administer user relationships'),
    'file'              => 'user_relationships_ui.admin.inc',
  );

  $items['relationship_types/autocomplete'] = array(
    'title'             => t('User Relationships Autocomplete'),
    'type'              => MENU_CALLBACK,
    'page callback'     => '_user_relationships_ui_autocomplete_types',
    'access callback'   => 'user_access',
    'access arguments'  => array('administer user relationships'),
  );

  $items['relationships'] = array(
    'title'             => t('My relationships'),
    'type'              => MENU_NORMAL_ITEM,
    'access callback'   => 'user_relationships_ui_check_access',
    'access arguments'  => array('view'),
    'page callback'     => 'user_relationships_page',
    'file'              => 'user_relationships_ui.pages.inc',
  );
    $items['relationships/list'] = array(
      'title'             => t('All'),
      'type'              => MENU_NORMAL_ITEM|MENU_DEFAULT_LOCAL_TASK,
      'weight'            => -10,
      'access callback'   => 'user_relationships_ui_check_access',
      'access arguments'  => array('view'),
    );
    $items['relationships/requests'] = array(
      'title'             => t('Pending'),
      'access callback'   => 'user_relationships_ui_check_access',
      'access arguments'  => array('edit'),
      'type'              => MENU_NORMAL_ITEM|MENU_LOCAL_TASK,
      'weight'            => -9,
      'page callback'     => 'user_relationships_pending_requests_page',
      'file'              => 'user_relationships_ui.pages.inc',
    );
    foreach (user_relationships_types_load() as $rtid => $relationship) {
      $items["relationships/{$rtid}"] = array(
        'title'             => t($relationship->plural_name),
        'type'              => MENU_NORMAL_ITEM|MENU_LOCAL_TASK,
        'access callback'   => 'user_relationships_ui_check_access',
        'access arguments'  => array('edit'),
        'page callback'     => 'user_relationships_page',
        'page arguments'    => array(NULL, 1),
        'file'              => 'user_relationships_ui.pages.inc',
      );
    }

    $items['relationships/%user_relationships/remove'] = array(
      'title'             => t('Remove relationship'),
      'type'              => MENU_CALLBACK,
      'access callback'   => 'user_relationships_ui_check_access',
      'access arguments'  => array('edit'),
      'page callback'     => 'drupal_get_form',
      'page arguments'    => array('user_relationships_ui_remove', 1),
      'file'              => 'user_relationships_ui.forms.inc',
    );

    
  $items['relationship/%user/request'] = array(
    'title'             => t('Create a relationship'),
    'type'              => MENU_CALLBACK,
    'access callback'   =>  'user_relationships_ui_check_access',
    'access arguments'  => array('edit'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('user_relationships_ui_request', 1),
    'file'              => 'user_relationships_ui.forms.inc',
  );

  $items['user/%user/relationships'] = array(
    'title'             => t('Relationships'),
    'access callback'   => 'user_relationships_ui_check_access',
    'access arguments'  => array('admin'),
    'page callback'     => 'user_relationships_page',
    'page arguments'    => array(1),
    'file'              => 'user_relationships_ui.pages.inc',
  );
    $items['user/%user/relationships/list'] = array(
      'title'             => t('All'),
      'type'              => MENU_NORMAL_ITEM|MENU_DEFAULT_LOCAL_TASK,
      'weight'            => -10,
      'access callback'   => 'user_relationships_ui_check_access',
      'access arguments'  => array('admin'),
    );
    $items['user/%user/relationships/requests'] = array(
      'title'             => t('Pending'),
      'type'              => MENU_NORMAL_ITEM|MENU_LOCAL_TASK,
      'weight'            => -9,
      'access callback'   => 'user_relationships_ui_check_access',
      'access arguments'  => array('admin'),
      'page callback'     => 'user_relationships_pending_requests_page',
      'page arguments'    => array(1),
      'file'              => 'user_relationships_ui.pages.inc',
    );

    foreach (user_relationships_types_load() as $rtid => $relationship) {
      $items["user/%user/relationships/{$rtid}"] = array(
        'title'             => t($relationship->plural_name),
        'type'              => MENU_NORMAL_ITEM|MENU_LOCAL_TASK,
        'access callback'   => 'user_relationships_ui_check_access',
        'access arguments'  => array('admin'),
        'page callback'     => 'user_relationships_page',
        'page arguments'    => array(1, 3),
        'file'              => 'user_relationships_ui.pages.inc',
      );
    }

    foreach (array('approve', 'disapprove', 'cancel') as $action) {
      $items["user/%user/relationships/requested/%user_relationships/{$action}"] = array(
        'title'             => t('Approve Relationship'),
        'type'              => MENU_CALLBACK,
        'access callback'   => 'user_relationships_ui_check_access',
        'access arguments'  => array(array('admin', 'user'), 1),
        'page callback'     => 'drupal_get_form', 
        'page arguments'    => array('user_relationships_ui_pending_requested', $action, 1, 4),
        'file'              => 'user_relationships_ui.forms.inc',
      );
    }

    $items['user/%user/relationships/%user_relationships/remove'] = array(
      'title'             => t('Remove relationship'),
      'type'              => MENU_CALLBACK,
      'access callback'   => 'user_relationships_ui_check_access',
      'access arguments'  => array(array('admin', 'user'), 1),
      'page callback'     => 'drupal_get_form',
      'page arguments'    => array('user_relationships_ui_remove', 1, 3),
      'file'              => 'user_relationships_ui.forms.inc',
    );

  return $items;
}

/**
 * User
 */
function user_relationships_ui_user($type, &$edit, &$account, $category = NULL) {
  switch($type) {
  case 'login':
    if (user_access('maintain own relationships')) {
      _user_relationships_ui_set_notifications($account);
    }
    break;

  case 'view':
    global $user;
    $viewer =& $user;

    if (($account->uid == $user->uid) && user_access('maintain own relationships')) {
      _user_relationships_ui_set_notifications($account);
      break;
    }

    $output = array();
    if ($list = _user_relationships_ui_between($viewer, $account)) {
      $output['relations'] = array(
        '#title'      => t('Your relationships to this user'),
        '#type'       => 'user_profile_item',
        '#value'      => theme('item_list', $list), 
        '#attributes' => array('class' => 'user_relationships_ui'),
      );
    }

    if ($actions = _user_relationships_ui_actions_between($viewer, $account)) {
      $output['actions'] = array(
        '#title'      => t('Relationship actions'), 
        '#type'       => 'user_profile_item',
        '#value'      => theme('item_list', $actions), 
        '#attributes' => array('class' => 'user_relationships_ui_actions'),
      );
    }

    if(sizeof($output)) {
      $account->content['user_relationships_ui'] = array(
        '#type'   => 'user_profile_category',
        '#title'  => t('Relationships'),
      );
      $account->content['user_relationships_ui'] = array_merge($account->content['user_relationships_ui'], $output);
    }
    break;

  case 'form':
    if (($category == 'account') 
      && variable_get('user_relationships_ui_require_approval', TRUE) 
      && user_access('maintain own relationships', $account)
    ) {
      $form['user_relationships_ui_settings'] = array(
        '#type'   => 'fieldset',
        '#title'  => t('Relationship settings'),
        '#weight' => 5
      );

      if (variable_get('user_relationships_ui_allow_auto_approve', FALSE) && ($relationships = user_relationships_types_load())) {
        if (!is_array($edit['user_relationships_ui_auto_approve'])) {
          $edit['user_relationships_ui_auto_approve'] = array();
        }

        $options = array();
        foreach ($relationships as $relationship) {
          if ($relationship->requires_approval) {
            $options[$relationship->rtid] = $relationship->name;
          }
        }
        $form['user_relationships_ui_settings']['user_relationships_ui_auto_approve'] = array(
          '#type'           => 'checkboxes',
          '#title'          => t('Automatically approve the following relationship requests'),
          '#options'        => $options,
          '#default_value'  => $edit['user_relationships_ui_auto_approve'],
          '#description'    => t("Check off the types of relationships you'd like to automatically approve.")
        );
      }
    }

    // No options have been set so don't display it
    if (sizeof($form['user_relationships_ui_settings']) == 3) {
      unset($form['user_relationships_ui_settings']);
    }
    return $form;
  }
}


/**
 * Theme
 */
function user_relationships_ui_theme() {
  $theme_funcs = array(
    'user_relationships_request_relationship_link' => array(
      'arguments' => array('relate_to' => NULL)
    ),

    'user_relationships_remove_link' => array(
      'arguments' => array('uid' => NULL, 'rid' => NULL)
    ),

    'user_relationships_pending_request_approve_link' => array(
      'arguments' => array('uid' => NULL, 'rid' => NULL)
    ),

    'user_relationships_pending_request_disapprove_link' => array(
      'arguments' => array('uid' => NULL, 'rid' => NULL)
    ),

    'user_relationships_pending_request_cancel_link' => array(
      'arguments' => array('uid' => NULL, 'rid' => NULL)
    ),

    'user_relationships_approval_status' => array(
      'arguments' => array('approved' => NULL)
    ),

    'user_relationships_user_link' => array(
      'arguments' => array('uid' => NULL)
    ),
  );
  foreach ($theme_funcs as $key => $val) {
    $theme_funcs[$key]['file'] = 'user_relationships_ui.theme.inc';
  }

  $theme_templates = array(
    'user_relationships' => array(
      'arguments' => array('account' => NULL, 'rtid' => NULL),
      'file'      => 'user_relationships_ui.templates.inc',
      'path'      => drupal_get_path('module', 'user_relationships_ui').'/templates',
      'template'  => 'user_relationships',
    ),

    'user_relationships_pending_requests' => array(
      'arguments' => array('account' => NULL),
      'file'      => 'user_relationships_ui.templates.inc',
      'path'      => drupal_get_path('module', 'user_relationships_ui').'/templates',
      'template'  => 'user_relationships_pending_requests',
    ),
  );

  return array_merge($theme_funcs, $theme_templates);
}
